generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  name          String
  image         String?
  email         String         @unique
  password      String
  items         Item[]
  circles       CircleMember[]
  proposedSwaps SwapProposal[] @relation("Proposer")
  receivedSwaps SwapProposal[] @relation("Receiver")
  addedItems    CircleItem[]
  updateAt      DateTime       @default(now())
  createdAt     DateTime       @updatedAt
}

model Item {
  id            Int           @id @default(autoincrement())
  userId        Int
  user          User          @relation(fields: [userId], references: [id])
  title         String
  description   String        @db.Text
  image         String
  currentPrice  Float         @default(1)
  originalPrice Float         @default(1)
  currencyType  CurrencyType  @default(INR)
  company       String
  category      Category
  condition     ItemCondition
  barterType    BarterType    @default(ONLINE)
  location      String?
  hasBill       Boolean       @default(false)
  rating        Float?        @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  isSwapped     Boolean       @default(false)

  circles         CircleItem[]
  proposerInSwaps SwapProposal[] @relation("ProposerItem")
  receiverInSwaps SwapProposal[] @relation("ReceiverItem")
}

model SwapProposal {
  id Int @id @default(autoincrement())

  proposerId Int
  proposer   User @relation("Proposer", fields: [proposerId], references: [id])

  receiverId Int
  receiver   User @relation("Receiver", fields: [receiverId], references: [id])

  proposedItemId Int
  proposedItem   Item @relation("ProposerItem", fields: [proposedItemId], references: [id])

  receiverItemId Int
  receiverItem   Item @relation("ReceiverItem", fields: [receiverItemId], references: [id])

  message String?    @db.Text
  status  SwapStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Circle {
  id          Int            @id @default(autoincrement())
  name        String
  description String         @db.Text
  image       String?
  members     CircleMember[]
  items       CircleItem[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model CircleMember {
  id       Int        @id @default(autoincrement())
  userId   Int
  user     User       @relation(fields: [userId], references: [id])
  circleId Int
  circle   Circle     @relation(fields: [circleId], references: [id])
  role     MemberRole @default(MEMBER)

  @@unique([userId, circleId])
}

model CircleItem {
  id         Int     @id @default(autoincrement())
  itemId     Int
  item       Item    @relation(fields: [itemId], references: [id])
  circleId   Int
  circle     Circle  @relation(fields: [circleId], references: [id])
  userId     Int
  user       User    @relation(fields: [userId], references: [id])
  isApproved Boolean @default(false)
}

enum SwapStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}

enum CurrencyType {
  INR
  USD
}

enum Category {
  ELECTRONICS
  CLOTHING
  BOOKS
  FURNITURE
  TOYS
  FOOTWEAR
  BEAUTY
  STATIONERY
  OTHER
}

enum ItemCondition {
  NEW
  LIKE_NEW
  USED
  DAMAGED
}

enum BarterType {
  INPERSON
  ONLINE
}

enum MemberRole {
  ADMIN
  MEMBER
}
